rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasConnection(otherUserId) {
      return exists(/databases/$(database)/documents/connections/{connId}) &&
        get(/databases/$(database)/documents/connections/{connId}).data.users.hasAll([request.auth.uid, otherUserId]) &&
        get(/databases/$(database)/documents/connections/{connId}).data.status == 'accepted';
    }

    // Test mode - allow read/write to authenticated users
    // TODO: Replace with production rules before deployment

    // Allow all operations during development
    match /{document=**} {
      allow read, write: if true;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && 
        request.auth.uid == userId &&
        // Only allow updating specific fields
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['displayName', 'photoURL', 'onboardingCompleted', 'lastLoginAt']);
    }
    
    match /profiles/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;  // Profiles should not be deleted
    }
    
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.metadata.author == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.metadata.author == request.auth.uid;
    }

    match /responses/{responseId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        hasConnection(resource.data.userId)
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }

    match /guesses/{guessId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        (isOwner(resource.data.targetUserId) && exists(/databases/$(database)/documents/responses/{responseId}))
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }

    match /metrics/questions/{questionId} {
      allow read: if isAuthenticated();
      allow write: if false;  // Only updated by server
    }

    match /metrics/quizzes/{quizId} {
      allow read: if isAuthenticated();
      allow write: if false;  // Only updated by server
    }

    match /connections/{connectionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }

    match /userStats/{userId} {
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        hasConnection(userId)
      );
      allow write: if false;  // Only updated by server
    }

    match /_test_/{document=**} {
      // Remove test collection access in production
      allow read, write: if false;
    }

    match /response_metrics/{questionId} {
      allow read: if request.auth != null;
      // Only system can write metrics
      allow write: if false;
    }
  }
} 